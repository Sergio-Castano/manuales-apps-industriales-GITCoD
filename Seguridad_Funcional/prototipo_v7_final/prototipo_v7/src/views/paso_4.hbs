{{!-- MQTT --}}

<script src="/js/paho-mqtt.js"></script>
<script>
    var estadosActualizados = false;
    var MQTT_Data = {};
    var intervalID;
</script>
<script>
    // Crear un cliente MQTT usando WSS
    var client = new Paho.Client("192.168.0.107", 9001, "webClient15");

    client.onConnectionLost = (responseObject) => {
        if (responseObject.errorCode !== 0) {
            console.log("Conexión perdida:", responseObject.errorMessage);
        }
    };

    client.connect({
        onSuccess: onConnect,
        useSSL: false,
        onFailure: (error) => {
            console.log("Error al conectar:", error);
            alert("Error al conectar al broker MQTT: " + error.errorMessage);
        }
    });

    function onConnect() {
        console.log("Conectado a MQTT");
        subscribeTopic();
    }

    function subscribeTopic() {
        client.subscribe("/centelsa/mqtt/app/test", { qos: 2 });
        console.log("Suscrito al tópico: " + "/centelsa/mqtt/app/test");
    }
    function publishRequest() {
        return new Promise((resolve, reject) => {
            // Verifica que el cliente esté conectado
            if (!client.isConnected()) {
                console.error("El cliente MQTT no está conectado.");
                reject("El cliente MQTT no está conectado.");
                return;
            }

            // Listener temporal para recibir solo el siguiente mensaje
            client.onMessageArrived = (message) => {
                try {
                    MQTT_Data = JSON.parse(message.payloadString);
                    console.log("Datos recibidos:", MQTT_Data);
                    resolve(MQTT_Data);  // Resuelve la promesa con los datos recibidos
                } catch (error) {
                    reject("Error al procesar el mensaje MQTT: " + error);
                }
            };

            // Publicar el mensaje MQTT
            const message = new Paho.Message("enviar");
            message.destinationName = "/centelsa/mqtt/app/test/request";
            message.qos = 2;
            client.send(message);
            console.log("Mensaje publicado");
        });
    }
</script>

<!-- Modal validación HW-->
<div class="modal fade" id="ModalComfBoton">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5 fw-bold" id="staticBackdropLabel">Validación por hardware</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body mb-5" id="mensajeComfHW" style="font-size: 1.5rem;">
                S
            </div>
        </div>
    </div>
</div>



{{#if electrico}}
<script>
    async function comfirmacion_hardware(paso_actual) {
        try {
            // Esperar hasta que se reciba el mensaje MQTT
            const data = await publishRequest();

            var divElement = document.getElementById("mensajeComfHW");

            switch (paso_actual) {
                case 0:
                    divElement.innerText = "Se ha detectado tensión eléctrica en la sección energizada por E3.1.";
                    return data.M341E31 === "0";  // Retorna true o false
                case 1:
                    divElement.innerText = "Se ha detectado tensión eléctrica en la sección energizada por E3.";
                    return true;  // Retorna true o false data.M341E3 === "0"
                case 2:
                    divElement.innerText = "Se ha detectado tensión eléctrica en la sección energizada por E2.";
                    return true;  // Retorna true o false data.M341E2 === "0"
                case 3:
                    divElement.innerText = "Se ha detectado tensión eléctrica en la sección energizada por E1.";
                    return true;  // Retorna true o false data.M341E1 === "0"
                default:
                    return false;  // Retorna false si no coincide ningún caso
            }
        } catch (error) {
            console.error("Error en la confirmación de hardware:", error);
            return false;
        }
    }
</script>
{{else}}
<script>
    async function comfirmacion_hardware(paso_actual) {
        try {
            // Esperar hasta que se reciba el mensaje MQTT
            const data = await publishRequest();

            var divElement = document.getElementById("mensajeComfHW");

            switch (paso_actual) {
                case 0:
                    divElement.innerText = "Se detecta presión neumática en la máquina.";
                    return data.M341N1 === "0";  // Retorna true o false
                default:
                    return false;  // Retorna false si no coincide ningún caso
            }
        } catch (error) {
            console.error("Error en la confirmación de hardware:", error);
            return false;
        }
    }
</script>
{{/if}}



<div class="my-body-area">
    <div class="section-left">
        <div class="top-half-left">
            <div id="profile-pic" class="profile-pic"></div>
            <div id="user-name" class="user-name">Nombre Apellido</div>
            <div id="user-email" class="user-email">email@ejemplo.com</div>
        </div>
        <div class="bottom-half-left">
            <div class="stage">
                A. Preparación
            </div>
            <div class="stage">
                B. Bloqueo
            </div>
            <div class="stage">
                C. Intervención
            </div>
            <div class="stage">
                D. Desbloqueo
            </div>
            <div class="stage">
                E. Puesta a punto
            </div>
            <div class="stage">
                F. Entrega
            </div>
        </div>
    </div>
    <div class="section-right">
        <div class="top-half-right">
            <div style="padding-left: 40px; color: white; font-weight: bold; font-size: 1.5rem;">Asistente de
                mantenimiento</div>
            <div style="padding-right: 40px; color: white;"> Logout </div>
        </div>

        <div class="bottom-half-right">
            <div class="mt-2">
                <p id="titulo_bloqueo" style="font-weight: 400; font-size: 2.3rem;">
                    {{#if electrico}}
                    (Bloqueo Eléctrico) Máquina 341 - Desembobinador
                    {{else}}
                    (Bloqueo Mecánico) Máquina 341 - Desembobinador
                    {{/if}}
                </p>
            </div>
            <div style="margin-top: 30px;">
                <div class="progress-container" id="progressBar"></div>
                <script>
                    function createProgressBar(totalSteps) {
                        const progressBar = document.getElementById('progressBar');
                        progressBar.innerHTML = ''; // Limpiar contenido previo

                        for (let i = 1; i <= totalSteps; i++) {
                            const step = document.createElement('div');
                            step.classList.add('step');

                            const stepNumber = document.createElement('div');
                            stepNumber.classList.add('step-number');
                            stepNumber.textContent = i;

                            const led = document.createElement('div');
                            led.classList.add('led');
                            led.id = `led-${i}`;

                            step.appendChild(stepNumber);
                            step.appendChild(led);
                            progressBar.appendChild(step);
                        }
                    }

                    function updateProgressBar(totalSteps, activeSteps) {
                        createProgressBar(totalSteps);

                        for (let i = 1; i <= activeSteps; i++) {
                            const led = document.getElementById(`led-${i}`);
                            if (led) {
                                led.classList.add('active');
                            }
                        }
                    }

                </script>
            </div>
            <div class="info-container mt-5">
                <div class="contenedor_izquierdo" style="width: 30%;">
                    <!-- Agregar imagen aquí -->
                    <img id="myImage" src="" alt="Imagen" style="width: 90%; height: auto;">
                </div>
                <div class="contenedor_derecho" style="width: 70%;">
                    <div class="box-container">
                        <div id="steps-container" class="box box2">
                            <p id="titulo" class="fw-bold" style="font-size: 2.3rem;">
                            </p>
                            <p id="cuerpo" style="font-size: 2rem;">
                            </p>
                        </div>
                        <div class="box mt-4 mb-5"
                            style="display: flex; align-items: center;  justify-content: center; width:100%;">
                            <div class="box"
                                style="display: flex; align-items: center;  justify-content: center;  gap: 10px; width:100%;">
                                <input type="checkbox" id="confirm-check" style="width: 2rem; height: 2rem;">
                                <span id="confirm-text" style="font-size: 1.5rem;"></span>
                            </div>
                        </div>
                        <div class="button-container">
                            <button type="button" id="prev-step" class="btn btn-secondary btn-lg">
                                <i class="bi bi-arrow-left fs-1"></i>
                            </button>
                            <button type="button" id="next-step" class="btn btn-secondary btn-lg">
                                <i class="bi bi-arrow-right fs-1"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Centrar checkbox y texto */
    .check-container {
        display: flex;
        align-items: center;
        /* Centrar verticalmente */
        justify-content: center;
        /* Centrar horizontalmente */
        gap: 10px;
        /* Espacio entre el checkbox y el texto */
        font-size: 1.5rem;
        padding: 15px;
    }

    /* Ajustar tamaño del checkbox */
    #confirm-check {
        width: 24px;
        height: 24px;
    }

    /* Mantener la posición del botón de avanzar */
    .button-container {
        display: flex;
        justify-content: space-between;
        width: 100%;
    }

    .btn {
        width: 45%;
        background-color: #2b3b4a;
    }
</style>


{{#if electrico}}
<script>
    function replaceNewlinesWithBreaks(text) {
        return text.replace(/\n/g, '<br>');
    }
    const steps = [
        {
            title: 'Apague y Bloquee E3.1',
            body: replaceNewlinesWithBreaks("- Coloque el breaker del tablero de la máquina en posición OFF.\n- Mida la tensión y verifique que sea cero.\n- Bloquee con candado y tarjeta “No operar”."),
            confirmText: "Confirmo haber apagado, bloqueado y medido ausencia de tensión",
            imagen: "E3_1.jpg"

        },
        {
            title: 'Apague y Bloquee E3',
            body: replaceNewlinesWithBreaks("- Coloque el breaker Q1 del tablero de la máquina en posición OFF.\n- Mida la tensión y verifique que sea cero.\n- Bloquee con candado y tarjeta “No operar”."),
            confirmText: "Confirmo haber apagado, bloqueado y medido ausencia de tensión",
            imagen: "E3.png"

        },
        {
            title: "Apague y Bloquee E2",
            body: replaceNewlinesWithBreaks("- Coloque el totalizador Q0 del tablero de la máquina en posición OFF.\n- Mida la tensión y verifique que sea cero.\n- Bloquee con candado y tarjeta “No operar”"),
            confirmText: "Confirmo haber apagado, bloqueado y medido ausencia de tensión",
            imagen: "E2.png"
        },
        {
            title: "Apague y Bloquee E1",
            body: replaceNewlinesWithBreaks("- Coloque el totalizador Q19 del tablero de la subestación eléctrica #1 en posición OFF.\n- Mida la tensión y verifique que sea cero.\n- Bloquee con candado y tarjeta “No operar”"),
            confirmText: "Confirmo haber apagado, bloqueado y medido ausencia de tensión",
            imagen: "E1.png"
        }
    ];

    const totalPasos = 4;
</script>
{{else}}
<script>
    function replaceNewlinesWithBreaks(text) {
        return text.replace(/\n/g, '<br>');
    }
    const steps = [
        {
            title: "Cierre y Bloquee la válvula N1",
            body: replaceNewlinesWithBreaks("- Cierre la válvula de entrada principal de aire comprimido al entregador de la máquina.\n- Verifique la ausencia de presión.\n- Bloquee con candado y tarjeta “No operar”"),
            confirmText: "Confirmo haber cerrado, bloqueado y medido ausencia de presión",
            imagen: "N1.png"
        }
    ];
    const totalPasos = 1;
</script>
{{/if}}

<script>
    setUserProfile("{{usuario.picture}}", "{{usuario.name}}", "{{usuario.email}}")
    updateProgressBar(totalPasos, 1);
</script>

<script>
    const stages = document.querySelectorAll('.stage');
    const progressMessage = document.getElementById('progress-message');
    let currentStage = 2;

    function updateStage(stage) {
        stages.forEach((element, index) => {
            if (index + 1 < stage) {
                element.classList.add('completed');
                element.classList.remove('active');
            } else if (index + 1 === stage) {
                element.classList.add('active');
                element.classList.remove('completed');
            } else {
                element.classList.remove('active', 'completed');
            }
        });
    }

    updateStage(currentStage);
</script>

<script>
    var ModalComfBoton = new bootstrap.Modal(document.getElementById('ModalComfBoton'));

    document.addEventListener('DOMContentLoaded', () => {
        let currentStep = 0;
        const prevButton = document.getElementById('prev-step');
        const nextButton = document.getElementById('next-step');
        const confirmCheck = document.getElementById('confirm-check');
        const confirmText = document.getElementById('confirm-text');

        function renderStep(index) {
            if (index < 0 || index >= steps.length) return;

            document.getElementById('titulo').innerHTML = steps[index].title;
            document.getElementById('cuerpo').innerHTML = steps[index].body;
            confirmText.innerHTML = steps[index].confirmText;
            confirmCheck.checked = false; // Desmarcar al cambiar de paso

            // Cambiar la imagen con la correspondiente
            const imageElement = document.getElementById('myImage');
            imageElement.src = `/images/${steps[index].imagen}`; // Asegúrate de que las imágenes tengan los nombres correctos

            updateProgressBar(totalPasos, index + 1); // Actualizar la barra de progreso
        }

        prevButton.addEventListener('click', () => {
            if (currentStep > 0) {
                currentStep--;
                renderStep(currentStep);
            }
        });

        nextButton.addEventListener('click', () => {
            if (!confirmCheck.checked) {
                alert("Debe confirmar que ha realizado este paso antes de continuar.");
                return; // Detener el avance
            }

            comfirmacion_hardware(currentStep).then((validacion) => {
                console.log("Validación:", validacion);

                if (validacion) {
                    //Verifica si es el último paso
                    if (currentStep === steps.length - 1) {
                        const selectedOptionID = '{{selectedOptionID}}';
                        const usuario = '{{usuario._id}}';
                        fetch('/paso_5_al_8', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ usuario, selectedOptionID })
                        }).then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    window.location.href = data.redirectUrl;
                                }
                            }).catch(console.error);
                        return;
                    }
                    else {
                        currentStep++;
                        renderStep(currentStep);
                    }
                }
                else {
                    ModalComfBoton.show();
                }

            }).catch((error) => {
                console.error("Error en la validación:", error);
            });


        });

        renderStep(currentStep);
    });
</script>