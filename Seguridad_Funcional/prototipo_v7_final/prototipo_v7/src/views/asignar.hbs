<style>
    .choices {
        margin-bottom: 0.5rem;
    }
</style>

{{#each mensaje}}
<div class="alerta alerta-success alert-dismissible show" role="alert">
    {{text}}
    <button type="button" class="btn-close-custom" onclick="cerrarAlerta(this)" aria-label="Close">
        <i class="bi bi-x"></i>
    </button>
</div>
{{/each}}
<script>
    function cerrarAlerta(button) {
        let alerta = button.parentElement; // Obtiene el div padre de la alerta
        alerta.style.opacity = "0"; // Inicia la animación de desvanecimiento

        setTimeout(() => {
            alerta.style.display = "none"; // Oculta la alerta después de la animación
        }, 300); // Ajusta el tiempo según la duración de la animación CSS
    }
</script>

{{!-- Variables globales --}}
<script>
    maquinaData = null;
    campos_multichoices = [];
</script>


<div class="my-body-area">
    <div class="section-left">
        <div class="top-half-left">
            <div id="profile-pic" class="profile-pic"></div>
            <div id="user-name" class="user-name">Nombre Apellido</div>
            <div id="user-email" class="user-email">email@ejemplo.com</div>
        </div>
        <div class="bottom-half-left">
            <div class="stage active" data-target="agendar">
                1. Agendar mantenimiento
            </div>
            <div class="stage" data-target="agendados">
                2. Mantenimientos agendados
            </div>
            <div class="stage" data-target="realizados">
                3. Mantenimientos realizados
            </div>
            <div class="stage" data-target="usuarios">
                4. Gestión de usuarios
            </div>
        </div>
    </div>


    <div class="section-right">
        <div class="top-half-right">
            <div style="padding-left: 40px; color: white; font-weight: bold; font-size: 2rem;">Asistente de
                mantenimiento</div>
            <div style="padding-right: 40px;">
                <a href="/" style="color: white; text-decoration: none;">Logout</a>
            </div>
        </div>

        <div class="bottom-half-right">
            <div id="agendar" class="content-section active">
                <form action="/asignar/{{usuario._id}}" method="POST" id="procedimientoForm" style="width: 100%">
                    <div class="mb-3">
                        <label for="maquina" class="form-label">Máquina a realizar procedimiento:</label>
                        <select class="form-select" aria-label="Default select example" id="maquina" name="maquina"
                            required>
                            <option value="0" selected disabled hidden> Desplegar lista</option>
                            <option value="341">341</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="orden" class="form-label">Número de la orden autorizada:</label>
                        <input type="text" class="form-control" aria-label="Default select example" id="orden"
                            name="orden" autocomplete="off" required />
                    </div>
                    <hr>
                    <div style="width: 100%; display: flex; flex-direction: column;">
                        <div style="width: 100%; display:flex; justify-content: space-between; align-items: start;">

                            <div style="width: 49%;">
                                <div class="mb-2">
                                    <label for="date_I" class="form-label">Fecha y hora programada para iniciar
                                        el procedimiento:</label>
                                    <input name="intervenciones[0][date_I]" id="date_I" class="form-control" type="text"
                                        required />
                                </div>
                                <div class="mb-2">
                                    <label for="date_F" class="form-label">Fecha y hora programada para finalizar
                                        el procedimiento:</label>
                                    <input name="intervenciones[0][date_F]" id="date_F" class="form-control" type="text"
                                        required />
                                </div>
                                <div class="mb-2">
                                    <label for="tipo_1" class="form-label">Tipo de mantenimiento:</label>
                                    <select class="form-select" aria-label="Default select example" id="tipo_1"
                                        name="intervenciones[0][tipo]" onchange="cargarLider_y_Partes(1)" required>
                                        <option value="0" selected disabled hidden>Desplegar lista</option>
                                        <option value="electrico">Eléctrico</option>
                                        <option value="mecanico">Mecánico</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="rutina_bloq_1" class="form-label">Rutina de bloqueo:</label>
                                    <select class="form-select" aria-label="Default select example" id="rutina_bloq_1"
                                        name="intervenciones[0][rutina_bloq]" required>
                                        <option value="0" selected disabled hidden>Desplegar lista</option>
                                        <option value="mtto_prevent">Mantenimiento Preventivo</option>
                                    </select>
                                </div>
                            </div>

                            <div style="width: 49%; align-items: start;">

                                <div class="mb-3">
                                    <label for="encargadoSelect_1" class="form-label">Lider de bloqueo:</label>
                                    <select class="form-select" name="intervenciones[0][persona]" id="encargadoSelect_1"
                                        required>
                                        <!-- Las opciones serán añadidas dinámicamente con JavaScript -->
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="partesMaq_1" class="form-label">Seccion de la máquina a
                                        intervenir:</label>
                                    <select class="form-select" aria-label="Default select example" id="partesMaq_1"
                                        name="intervenciones[0][partesMaq]" onchange="updateComponentes(1)" required>
                                        <option value="0" selected disabled hidden> Desplegar lista</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="multiSelect" class="form-label">Componentes a los que se hará
                                        mantenimiento</label>
                                    <select class="form-select" aria-label="Default select example"
                                        id="select_componentes_1" name="intervenciones[0][componentes][]" multiple
                                        required>
                                        <!-- Las opciones serán añadidas dinámicamente con JavaScript -->
                                    </select>
                                    <div class="d-flex justify-content-end mt-0">
                                        <button type="button" class="btn btn-secondary"
                                            onclick="seleccionarTodos()">Seleccionar Todos</button>
                                    </div>
                                </div>
                                <script>
                                    let choices_aux = new Choices(document.getElementById('select_componentes_1'), {
                                        removeItemButton: true,
                                        placeholder: true,
                                        placeholderValue: 'Haga clic para desplegar actividades',
                                        searchEnabled: true,
                                        classNames: {
                                            containerOuter: 'choices',
                                            containerInner: 'choices__inner',
                                            input: 'choices__input',
                                            list: 'choices__list',
                                            item: 'choices__item',
                                            button: 'choices__button',
                                        }
                                    });
                                    campos_multichoices.push(choices_aux);

                                    function seleccionarTodos() {
                                        let select = document.getElementById('select_componentes_1');
                                        let choicesInstance = campos_multichoices[0]; // Obtener la instancia de Choices.js

                                        if (!choicesInstance) {
                                            console.error("No se encontró la instancia de Choices.js.");
                                            return;
                                        }

                                        // Obtener todas las opciones no seleccionadas actualmente
                                        let opcionesNoSeleccionadas = choicesInstance._store.choices
                                            .filter(choice => !choice.selected && !choice.placeholder)
                                            .map(choice => choice.value);

                                        if (opcionesNoSeleccionadas.length > 0) {
                                            // Seleccionar solo las opciones que no están seleccionadas
                                            choicesInstance.setValue(opcionesNoSeleccionadas);

                                            // Eliminar de la lista de selección solo las que fueron agregadas
                                            let opcionesRestantes = choicesInstance._store.choices.filter(choice => !opcionesNoSeleccionadas.includes(choice.value));

                                            choicesInstance.clearChoices();
                                        }
                                    }
                                </script>
                            </div>
                        </div>
                    </div>
                    <hr>
                    {{!-- Agregar procedimientos --}}
                    <div class="d-grid gap-2 d-md-flex justify-content-md-center">
                        <button class="btn btn-secondary btn-lg" type="button" style="display: none;"
                            id="agregarIntervencion">Agregar
                            Intervención</button>
                        <button class="btn btn-secondary btn-lg" type="button" style="display: none;"
                            id="eliminarIntervencion">Eliminar
                            Intervención</button>
                    </div>
                    <div class="d-grid gap-2 d-md-flex justify-content-md-center" style="margin-top: 1rem;">
                        <button class="btn btn-dark btn-lg" type="submit"> Autorizar procedimiento </button>
                    </div>
                </form>
            </div>


            <div id="agendados" class="content-section">
                <div class="bottom-half-right">
                    <div style="width: 100%;">
                        <table id="example" style="width:100%">
                            <thead>
                                <tr>
                                    <th># Orden</th>
                                    <th>Maquina</th>
                                    <th>Inicio Prog.</th>
                                    <th>Final Prog</th>
                                    <th>Tipo</th>
                                    <th>Sección</th>
                                    <th>Partes</th>
                                    <th>Encargado</th>
                                    <th>Eliminar</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each mttoProg}}
                                <tr>
                                    <td>{{order}}</td>
                                    <td>{{machine}}</td>
                                    <td>{{prog_date_start}}</td>
                                    <td>{{prog_date_end}}</td>
                                    <td>{{type}}</td>
                                    <td>{{section}}</td>
                                    <td>{{maintenance_act}}</td>
                                    <td>{{person}}</td>
                                    <td>
                                        <div class="container-fluid">
                                            <i class="bi bi-trash" role="button"
                                                style="padding-left: 5px; color: rgba(179,7,7,1);"
                                                onclick="EliminarReporte('{{_id}}')"></i>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                                {{!-- <tr>
                                    <td>10/01/2025</td>
                                    <td>341</td>
                                    <td>Desembobinador</td>
                                    <td>Eléctrico</td>
                                    <td>Sergio Castaño</td>
                                </tr>
                                <tr>
                                    <td>15/02/2025</td>
                                    <td>341</td>
                                    <td>Desembobinador</td>
                                    <td>Mecánico</td>
                                    <td>Jorge Marulanda</td>
                                </tr> --}}
                            </tbody>
                        </table>
                    </div>
                </div>
                <script>
                    let table = new DataTable('#example', {
                        responsive: true,
                        autoWidth: false,
                        columnDefs: [
                            { targets: 0, className: 'text-start' },
                            { targets: 1, className: 'text-start' },
                            { targets: 2, className: 'text-start' },
                            { targets: 3, className: 'text-start' },
                            { targets: 4, className: 'text-start' },
                            { targets: 5, className: 'text-start' },
                            { targets: 6, className: 'text-start' },
                            { targets: 7, className: 'text-start' },
                            { targets: 8, className: 'text-start' },
                        ],
                        order: [[0, 'desc']]
                    });
                </script>
            </div>


            <div id="realizados" class="content-section">
                <div class="bottom-half-right">
                    <div style="width: 100%;">
                        <table id="mtto_F_table" style="width:100%">
                            <thead>
                                <tr>
                                    <th># Orden</th>
                                    <th>Maquina</th>
                                    <th>Fecha In.</th>
                                    <th>Fecha Fn.</th>
                                    <th>Tipo</th>
                                    <th>Sección</th>
                                    <th>Partes</th>
                                    <th>Encargado</th>
                                    <th>Resultado</th>
                                    <th>Observaciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each mttoFinished}}
                                <tr>
                                    <td>{{order}}</td>
                                    <td>{{machine}}</td>
                                    <td>{{start_date}}</td>
                                    <td>{{finish_date}}</td>
                                    <td>{{type}}</td>
                                    <td>{{section}}</td>
                                    <td>{{maintenance_act}}</td>
                                    <td>{{person}}</td>
                                    <td> {{#each maintenance_exec}}
                                        {{part}}{{#unless @last}}, {{/unless}}
                                        {{/each}}</td>
                                    <td>{{comment}}</td>
                                </tr>
                                {{/each}}
                                {{!-- <tr>
                                    <td>10/01/2025</td>
                                    <td>341</td>
                                    <td>Desembobinador</td>
                                    <td>Eléctrico</td>
                                    <td>Sergio Castaño</td>
                                </tr>
                                <tr>
                                    <td>15/02/2025</td>
                                    <td>341</td>
                                    <td>Desembobinador</td>
                                    <td>Mecánico</td>
                                    <td>Jorge Marulanda</td>
                                </tr> --}}
                            </tbody>
                        </table>
                    </div>
                </div>
                <script>
                    let MF_table = new DataTable('#mtto_F_table', {
                        responsive: true,
                        autoWidth: false,
                        columnDefs: [
                            { targets: 0, className: 'text-start' },
                            { targets: 1, className: 'text-start' },
                            { targets: 2, className: 'text-start' },
                            { targets: 3, className: 'text-start' },
                            { targets: 4, className: 'text-start' },
                            { targets: 5, className: 'text-start' },
                            { targets: 6, className: 'text-start' },
                            { targets: 7, className: 'text-start' },
                            { targets: 8, className: 'text-start' },
                        ],
                        order: [[0, 'desc']]
                    });
                </script>
            </div>

            <div id="usuarios" class="content-section">
                <div style="width: 100%;">
                    <div class="container-fluid mt-2 mb-4">
                        <div class="d-grid gap-2 col-6 mx-auto ">
                            <button type="button" class="btn btn-lg btn-secondary" data-bs-toggle="modal"
                                data-bs-target="#ModalCrear">
                                Crear nuevo usuario </button>
                        </div>
                    </div>
                    <hr>
                    <table id="users_table" style="width:100%">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Email</th>
                                <th>Tipo</th>
                                <th>Equipo</th>
                                <th class="text-center">Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each users}}
                            <tr>
                                <td>{{name}}</td>
                                <td>{{email}}</td>
                                <td>{{type}}</td>
                                <td>{{team}}</td>
                                <td>
                                    <div class="container-fluid text-center">
                                        {{!-- <i class="bi bi-pencil-square" role="button"
                                            onclick="myFunction('{{_id}}')"
                                            style=" padding-right: 3px;color: black"></i> --}}
                                        <i class="bi bi-trash" role="button"
                                            style="padding-left: 3px; color: rgba(179,7,7,1);"
                                            onclick="myFunction2('{{_id}}')"></i>
                                    </div>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                    <script>
                        let users_table = new DataTable('#users_table', {
                            responsive: true,
                            autoWidth: false,
                            columnDefs: [
                                { targets: 0, className: 'text-start' },
                                { targets: 1, className: 'text-start' },
                                { targets: 2, className: 'text-start' },
                                { targets: 3, className: 'text-start' },
                                { targets: 4, className: 'text-start' },
                            ],
                            order: [[0, 'desc']]
                        });
                    </script>
                </div>
            </div>
        </div>
    </div>
</div>

{{!-- Modal crear usuario --}}
<div class="modal fade" id="ModalCrear" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Creación de nuevo usuario</h1>
            </div>
            <form action="/signup/{{usuario._id}}" method="post" method="post" enctype="multipart/form-data"
                autocomplete="new-password">
                <div class="modal-body">
                    <div class="form-floating mb-2">
                        <input type="text" name="user_name_123" value="" class="form-control" placeholder="Nombre"
                            autofocus readonly onfocus="this.removeAttribute('readonly');" autocomplete="new-password"
                            required>
                        <label>Nombre*</label>
                    </div>
                    <div class="form-floating mb-2">
                        <input type="email" name="user_email_123" value="" class="form-control" placeholder="email"
                            readonly onfocus="this.removeAttribute('readonly');" autocomplete="new-password" required>
                        <label>Email*</label>
                    </div>
                    <div class="form-floating mb-2">
                        <select class="form-select" name="tipo">
                            <option value="admin">Admin</option>
                            <option value="user">User</option>
                        </select>
                        <label>Tipo de usuario*</label>
                    </div>
                    <div class="form-floating mb-2">
                        <select class="form-select" name="equipo">
                            <option value="mecanico">Mecánico</option>
                            <option value="electrico">Eléctrico</option>
                            <option value="admin">Admin</option>
                        </select>
                        <label>Equipo*</label>
                    </div>
                    <div class="form-floating mb-2">
                        <input type="password" name="user_password_123" class="form-control" placeholder="Password"
                            readonly onfocus="this.removeAttribute('readonly');" autocomplete="new-password" required>
                        <label>Contraseña*</label>
                    </div>
                    <div class="form-floating mb-2">
                        <input type="password" name="confirm_password" class="form-control"
                            placeholder="Repeat password" readonly onfocus="this.removeAttribute('readonly');"
                            autocomplete="new-password" required>
                        <label>Confirmar contraseña*</label>
                    </div>
                    <hr>
                    <div class="mb-2 text-center">
                        <label class="mb-2">Foto de usuario</label>
                        <div class="input-group">
                            <span class="btn btn-secondary" id="fileButton" style="cursor: pointer;">Seleccionar
                                imagen</span>
                            <input type="text" id="fileName" class="form-control"
                                placeholder="Ningún archivo seleccionado" readonly style="cursor: pointer;">
                            <input type="file" id="fileInput" name="image" class="d-none" accept="image/*">
                        </div>
                        <script>
                            document.getElementById("fileName").addEventListener("click", function () {
                                document.getElementById("fileInput").click(); // Al hacer clic en el input de texto, se abre el selector de archivos
                            });

                            document.getElementById("fileButton").addEventListener("click", function () {
                                document.getElementById("fileInput").click(); // Al hacer clic en el input de texto, se abre el selector de archivos
                            });

                            document.getElementById("fileInput").addEventListener("change", function () {
                                let fileName = this.files.length > 0 ? this.files[0].name : "Ningún archivo seleccionado";
                                document.getElementById("fileName").value = fileName; // Se muestra el nombre en el input de texto
                            });
                        </script>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-primary btn-block" type="submit"> Crear </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </form>
        </div>
    </div>
</div>

{{!-- ONLOAD --}}
<script>
    window.onload = function () {
        document.getElementById("procedimientoForm").reset();

        flatpickr("#date_I", {
            enableTime: true,          // Activar selector de hora
            noCalendar: false,         // Mantener calendario visible
            dateFormat: "F j, Y - h:i K", // Formato interno: Año-Mes-Día Hora:Min AM/PM
            locale: "es",
            time_24hr: false           // Usar formato de 12 horas
        });

        flatpickr("#date_F", {
            enableTime: true,          // Activar selector de hora
            noCalendar: false,         // Mantener calendario visible
            dateFormat: "F j, Y - h:i K", // Formato interno: Año-Mes-Día Hora:Min AM/PM
            locale: "es",
            time_24hr: false           // Usar formato de 12 horas
        });
    };
</script>

<script>
    setUserProfile("{{usuario.picture}}", "{{usuario.name}}", "{{usuario.email}}")
</script>

<script>
    const stages = document.querySelectorAll('.stage');
    const contentSections = document.querySelectorAll('.content-section');

    stages.forEach(stage => {
        stage.addEventListener('click', () => {
            const target = stage.dataset.target;

            // Remover la clase 'active' de todos los stages y content sections
            stages.forEach(s => s.classList.remove('active'));
            contentSections.forEach(section => section.classList.remove('active'));

            // Agregar la clase 'active' al stage y content section correspondiente
            stage.classList.add('active');
            document.getElementById(target).classList.add('active');
        });
    });
</script>

{{!-- Callback que maneja el evento de cambio en el select de máquina --}}
<script>
    document.getElementById('maquina').addEventListener('change', async (event) => {
        const maquinaId = event.target.value;

        if (maquinaId && maquinaId !== '0') {
            try {
                const response = await fetch(`/api/maquinas/${maquinaId}`);
                maquinaData = await response.json();
                console.log('Datos de la máquina:', maquinaData); //Comentar luego
            } catch (error) {
                console.error('Error al obtener datos del servidor:', error);
            }
        }
    });
</script>

{{!-- Callback que maneja el evento de cambio de tipo de mantenimiento, actualizando lider y partes de la
máquina--}}
<script>
    function cargarLider_y_Partes(index) {
        const tipoSeleccionado = document.getElementById(`tipo_${index}`).value;
        const equipoSelect = document.getElementById(`encargadoSelect_${index}`);
        const partesSelect = document.getElementById(`partesMaq_${index}`);

        if (maquinaData) {
            // Realizar una solicitud HTTP GET al servidor para obtener las opciones basadas en el tipo seleccionado
            fetch(`/obtenerOpciones?tipo=${tipoSeleccionado}`)
                .then(response => response.json())
                .then(data => {
                    // Limpiar las opciones actuales
                    equipoSelect.innerHTML = '';

                    // Agregar las nuevas opciones del servidor
                    data.opciones.forEach(option => {
                        const optionElement = document.createElement('option');
                        optionElement.value = option;
                        optionElement.textContent = option.charAt(0).toUpperCase() + option.slice(1); // Capitalizar la primera letra
                        equipoSelect.appendChild(optionElement);
                    });
                })
                .catch(error => console.error('Error al cargar opciones:', error));

            const partesMaquina = maquinaData.partes.map(parte => parte.nombre);
            partesMaquina.sort();

            // Limpiar las opciones actuales
            partesSelect.innerHTML = '';
            partesSelect.innerHTML = '<option value="0" selected disabled hidden>Desplegar lista</option>';


            // Agregar las nuevas opciones del servidor
            partesMaquina.forEach(option => {
                const optionElement = document.createElement('option');
                optionElement.value = option;
                optionElement.textContent = option.charAt(0).toUpperCase() + option.slice(1); // Capitalizar la primera letra
                partesSelect.appendChild(optionElement);
            });
        }
        else {
            alert("Primero debe seleccionar una máquina");
            document.getElementById(`tipo_${index}`).value = "0";
        }

    }
</script>

{{!-- Callback que maneja el evento de cambio de parte de la máquina, actualizando los componentes--}}
<script>
    function updateComponentes(index) {
        const seccionMaq = document.getElementById(`partesMaq_${index}`).value;
        const tipoMantenimiento = document.getElementById(`tipo_${index}`).value;

        let options = [];

        if (tipoMantenimiento == "electrico") {
            const componentesElectricos = maquinaData.partes.find(parte => parte.nombre === seccionMaq).electricas.componentes.map(componente => componente.nombre);
            componentesElectricos.sort();
            options = componentesElectricos;
        }
        else if (tipoMantenimiento == "mecanico") {
            const componentesMecanicos = maquinaData.partes.find(parte => parte.nombre === seccionMaq).mecanicas.componentes.map(componente => componente.nombre);
            componentesMecanicos.sort();
            options = componentesMecanicos;
        }

        let my_choices = campos_multichoices[index - 1];
        my_choices.clearStore();
        options.forEach(function (option) {
            my_choices.setChoices([{ value: option, label: option, selected: false, disabled: false }], 'value', 'label', false);
        });
    };
</script>

<script>
    if (window.location.search.includes("success=1")) {
        // Usa history.replaceState para eliminar el parámetro de la URL
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
    }
</script>

<script>
    document.getElementById("procedimientoForm").setAttribute("novalidate", "true");

    document.getElementById("procedimientoForm").addEventListener("submit", function (event) {
        if (!validarFormulario()) {
            event.preventDefault(); // Evita que se envíe el formulario si la validación falla
            alert("Por favor, complete todos los campos correctamente antes de enviar el formulario.");
        }
    });

    function validarFormulario() {
        let esValido = true;

        // Validar los campos de texto
        const camposTexto = ["orden", "date_I", "date_F"];
        camposTexto.forEach(id => {
            const campo = document.getElementById(id);
            if (!campo.value.trim()) {
                esValido = false;
                campo.classList.add("is-invalid");
            } else {
                campo.classList.remove("is-invalid");
            }
        });

        // Validar los select
        const selects = ["maquina", "tipo_1", "rutina_bloq_1", "encargadoSelect_1", "partesMaq_1"];
        selects.forEach(id => {
            const select = document.getElementById(id);
            if (!select.value || select.value === "0") {
                esValido = false;
                select.classList.add("is-invalid");
            } else {
                select.classList.remove("is-invalid");
            }
        });

        // Validar select múltiple de componentes
        const selectComponentes = document.getElementById("select_componentes_1");
        if (!selectComponentes || selectComponentes.selectedOptions.length === 0) {
            esValido = false;
        }

        return esValido;
    }


</script>